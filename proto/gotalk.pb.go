// Code generated by protoc-gen-go.
// source: gotalk.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	gotalk.proto

It has these top-level messages:
	Msg
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Msg struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto1.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for TalkMessage service

type TalkMessageClient interface {
	// a hello world test
	GetHelloWorld(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
	// a hello world streaming test
	LetsStreaming(ctx context.Context, opts ...grpc.CallOption) (TalkMessage_LetsStreamingClient, error)
}

type talkMessageClient struct {
	cc *grpc.ClientConn
}

func NewTalkMessageClient(cc *grpc.ClientConn) TalkMessageClient {
	return &talkMessageClient{cc}
}

func (c *talkMessageClient) GetHelloWorld(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := grpc.Invoke(ctx, "/proto.TalkMessage/GetHelloWorld", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkMessageClient) LetsStreaming(ctx context.Context, opts ...grpc.CallOption) (TalkMessage_LetsStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TalkMessage_serviceDesc.Streams[0], c.cc, "/proto.TalkMessage/LetsStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &talkMessageLetsStreamingClient{stream}
	return x, nil
}

type TalkMessage_LetsStreamingClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type talkMessageLetsStreamingClient struct {
	grpc.ClientStream
}

func (x *talkMessageLetsStreamingClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talkMessageLetsStreamingClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TalkMessage service

type TalkMessageServer interface {
	// a hello world test
	GetHelloWorld(context.Context, *Msg) (*Msg, error)
	// a hello world streaming test
	LetsStreaming(TalkMessage_LetsStreamingServer) error
}

func RegisterTalkMessageServer(s *grpc.Server, srv TalkMessageServer) {
	s.RegisterService(&_TalkMessage_serviceDesc, srv)
}

func _TalkMessage_GetHelloWorld_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Msg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TalkMessageServer).GetHelloWorld(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TalkMessage_LetsStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalkMessageServer).LetsStreaming(&talkMessageLetsStreamingServer{stream})
}

type TalkMessage_LetsStreamingServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type talkMessageLetsStreamingServer struct {
	grpc.ServerStream
}

func (x *talkMessageLetsStreamingServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talkMessageLetsStreamingServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TalkMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TalkMessage",
	HandlerType: (*TalkMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHelloWorld",
			Handler:    _TalkMessage_GetHelloWorld_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LetsStreaming",
			Handler:       _TalkMessage_LetsStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
